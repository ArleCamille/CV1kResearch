class MpegAudioDecoder(object):
    scalefactors = [
        2.00000000000000, 1.58740105196820, 1.25992104989487, 1.00000000000000,
        0.79370052598410, 0.62996052494744, 0.50000000000000, 0.39685026299205,
        0.31498026247372, 0.25000000000000, 0.19842513149602, 0.15749013123686,
        0.12500000000000, 0.09921256574801, 0.07874506561843, 0.06250000000000,
        0.04960628287401, 0.03937253280921, 0.03125000000000, 0.02480314143700,
        0.01968626640461, 0.01562500000000, 0.01240157071850, 0.00984313320230,
        0.00781250000000, 0.00620078535925, 0.00492156660115, 0.00390625000000,
        0.00310039267963, 0.00246078330058, 0.00195312500000, 0.00155019633981,
        0.00123039165029, 0.00097656250000, 0.00077509816991, 0.00061519582514,
        0.00048828125000, 0.00038754908495, 0.00030759791257, 0.00024414062500,
        0.00019377454248, 0.00015379895629, 0.00012207031250, 0.00009688727124,
        0.00007689947814, 0.00006103515625, 0.00004844363562, 0.00003844973907,
        0.00003051757812, 0.00002422181781, 0.00001922486954, 0.00001525878906,
        0.00001211090890, 0.00000961243477, 0.00000762939453, 0.00000605545445,
        0.00000480621738, 0.00000381469727, 0.00000302772723, 0.00000240310869,
        0.00000190734863, 0.00000151386361, 0.00000120155435, 0.00000000000000
    ]

    # band_info: int modulo; double s1; int bits, cube_bits; int s4, s5; double range, s7, scale, offset;
    band_infos = [
        (0x0000,  0.00,  0,  0, 0,  0,           0,          0,                 0,         0),
        (0x0003,  7.00,  2,  5, 3,  9, 1-1.0/    4, -1.0/    4,   1/(1-1.0/    4), 1.0/    2),
        (0x0005, 11.00,  3,  7, 5, 25, 1-3.0/    8, -3.0/    8,   1/(1-3.0/    8), 1.0/    2),
        (0x0007, 16.00,  3,  9, 0,  0, 1-1.0/    8, -1.0/    8,   1/(1-1.0/    8), 1.0/    4),
        (0x0009, 20.84,  4, 10, 9, 81, 1-7.0/   16, -7.0/   16,   1/(1-7.0/   16), 1.0/    2),
        (0x000f, 25.28,  4, 12, 0,  0, 1-1.0/   16, -1.0/   16,   1/(1-1.0/   16), 1.0/    8),
        (0x001f, 31.59,  5, 15, 0,  0, 1-1.0/   32, -1.0/   32,   1/(1-1.0/   32), 1.0/   16),
        (0x003f, 37.75,  6, 18, 0,  0, 1-1.0/   64, -1.0/   64,   1/(1-1.0/   64), 1.0/   32),
        (0x007f, 43.84,  7, 21, 0,  0, 1-1.0/  128, -1.0/  128,   1/(1-1.0/  128), 1.0/   64),
        (0x00ff, 49.89,  8, 24, 0,  0, 1-1.0/  256, -1.0/  256,   1/(1-1.0/  256), 1.0/  128),
        (0x01ff, 55.93,  9, 27, 0,  0, 1-1.0/  512, -1.0/  512,   1/(1-1.0/  512), 1.0/  256),
        (0x03ff, 61.96, 10, 30, 0,  0, 1-1.0/ 1024, -1.0/ 1024,   1/(1-1.0/ 1024), 1.0/  512),
        (0x07ff, 67.98, 11, 33, 0,  0, 1-1.0/ 2048, -1.0/ 2048,   1/(1-1.0/ 2048), 1.0/ 1024),
        (0x0fff, 74.01, 12, 36, 0,  0, 1-1.0/ 4096, -1.0/ 4096,   1/(1-1.0/ 4096), 1.0/ 2048),
        (0x1fff, 80.03, 13, 39, 0,  0, 1-1.0/ 8192, -1.0/ 8192,   1/(1-1.0/ 8192), 1.0/ 4096),
        (0x3fff, 86.05, 14, 42, 0,  0, 1-1.0/16384, -1.0/16384,   1/(1-1.0/16384), 1.0/ 8192),
        (0x7fff, 92.01, 15, 45, 0,  0, 1-1.0/32768, -1.0/32768,   1/(1-1.0/32768), 1.0/16384),
        (0xffff, 98.01, 16, 48, 0,  0, 1-1.0/65536, -1.0/65536,   1/(1-1.0/65536), 1.0/32768),
    ]

    sample_rates = {
        True: [44100, 48000, 32000],
        False: [22050, 24000, 16000],
    }

    band_parameter_indexed_values = [
        [
            [ 0, 1, 3, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,-1,],
            [ 0, 1, 3, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,-1,],
            [ 0, 1, 3, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
        ],
        [
            [ 0, 1, 3, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,-1,],
            [ 0, 1, 3, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,-1,],
            [ 0, 1, 3, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,17,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 3, 4, 5, 6,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
        ],
        [
            [ 0, 1, 2, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
        ],
        [
            [ 0, 1, 2, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
        ],
        [
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,-1,],
            [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4, 5, 6, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0, 1, 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
            [ 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,],
        ],
    ]

    band_parameter_index_bits_count = [
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0,],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 0, 0,],
        [4, 4, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,],
    ]

    total_band_counts = (27, 30, 8, 12, 30)
    joint_band_counts = (4, 8, 12, 16)

    synthesis_filter = [
        +0.000000000, -0.000015259, -0.000015259, -0.000015259, -0.000015259, -0.000015259, -0.000015259, -0.000030518,
        -0.000030518, -0.000030518, -0.000030518, -0.000045776, -0.000045776, -0.000061035, -0.000061035, -0.000076294,
        -0.000076294, -0.000091553, -0.000106812, -0.000106812, -0.000122070, -0.000137329, -0.000152588, -0.000167847,
        -0.000198364, -0.000213623, -0.000244141, -0.000259399, -0.000289917, -0.000320435, -0.000366211, -0.000396729,
        -0.000442505, -0.000473022, -0.000534058, -0.000579834, -0.000625610, -0.000686646, -0.000747681, -0.000808716,
        -0.000885010, -0.000961304, -0.001037598, -0.001113892, -0.001205444, -0.001296997, -0.001388550, -0.001480103,
        -0.001586914, -0.001693726, -0.001785278, -0.001907349, -0.002014160, -0.002120972, -0.002243042, -0.002349854,
        -0.002456665, -0.002578735, -0.002685547, -0.002792358, -0.002899170, -0.002990723, -0.003082275, -0.003173828,
        +0.003250122, +0.003326416, +0.003387451, +0.003433228, +0.003463745, +0.003479004, +0.003479004, +0.003463745,
        +0.003417969, +0.003372192, +0.003280640, +0.003173828, +0.003051758, +0.002883911, +0.002700806, +0.002487183,
        +0.002227783, +0.001937866, +0.001617432, +0.001266479, +0.000869751, +0.000442505, -0.000030518, -0.000549316,
        -0.001098633, -0.001693726, -0.002334595, -0.003005981, -0.003723145, -0.004486084, -0.005294800, -0.006118774,
        -0.007003784, -0.007919312, -0.008865356, -0.009841919, -0.010848999, -0.011886597, -0.012939453, -0.014022827,
        -0.015121460, -0.016235352, -0.017349243, -0.018463135, -0.019577026, -0.020690918, -0.021789550, -0.022857666,
        -0.023910522, -0.024932861, -0.025909424, -0.026840210, -0.027725220, -0.028533936, -0.029281616, -0.029937744,
        -0.030532837, -0.031005860, -0.031387330, -0.031661987, -0.031814575, -0.031845093, -0.031738280, -0.031478880,
        +0.031082153, +0.030517578, +0.029785156, +0.028884888, +0.027801514, +0.026535034, +0.025085450, +0.023422241,
        +0.021575928, +0.019531250, +0.017257690, +0.014801025, +0.012115479, +0.009231567, +0.006134033, +0.002822876,
        -0.000686646, -0.004394531, -0.008316040, -0.012420654, -0.016708374, -0.021179200, -0.025817871, -0.030609130,
        -0.035552980, -0.040634155, -0.045837402, -0.051132202, -0.056533813, -0.061996460, -0.067520140, -0.073059080,
        -0.078628540, -0.084182740, -0.089706420, -0.095169070, -0.100540160, -0.105819700, -0.110946655, -0.115921020,
        -0.120697020, -0.125259400, -0.129562380, -0.133590700, -0.137298580, -0.140670780, -0.143676760, -0.146255500,
        -0.148422240, -0.150115970, -0.151306150, -0.151962280, -0.152069090, -0.151596070, -0.150497440, -0.148773200,
        -0.146362300, -0.143264770, -0.139450070, -0.134887700, -0.129577640, -0.123474120, -0.116577150, -0.108856200,
        +0.100311280, +0.090927124, +0.080688480, +0.069595340, +0.057617188, +0.044784546, +0.031082153, +0.016510010,
        +0.001068115, -0.015228271, -0.032379150, -0.050354004, -0.069168090, -0.088775635, -0.109161380, -0.130310060,
        -0.152206420, -0.174789430, -0.198059080, -0.221984860, -0.246505740, -0.271591200, -0.297210700, -0.323318480,
        -0.349868770, -0.376800540, -0.404083250, -0.431655880, -0.459472660, -0.487472530, -0.515609740, -0.543823240,
        -0.572036740, -0.600219700, -0.628295900, -0.656219500, -0.683914200, -0.711318970, -0.738372800, -0.765029900,
        -0.791214000, -0.816864000, -0.841949460, -0.866363500, -0.890090940, -0.913055400, -0.935195900, -0.956481930,
        -0.976852400, -0.996246340, -1.014617900, -1.031936600, -1.048156700, -1.063217200, -1.077117900, -1.089782700,
        -1.101211500, -1.111373900, -1.120224000, -1.127746600, -1.133926400, -1.138763400, -1.142211900, -1.144287100,
        +1.144989000, +1.144287100, +1.142211900, +1.138763400, +1.133926400, +1.127746600, +1.120224000, +1.111373900,
        +1.101211500, +1.089782700, +1.077117900, +1.063217200, +1.048156700, +1.031936600, +1.014617900, +0.996246340,
        +0.976852400, +0.956481930, +0.935195900, +0.913055400, +0.890090940, +0.866363500, +0.841949460, +0.816864000,
        +0.791214000, +0.765029900, +0.738372800, +0.711318970, +0.683914200, +0.656219500, +0.628295900, +0.600219700,
        +0.572036740, +0.543823240, +0.515609740, +0.487472530, +0.459472660, +0.431655880, +0.404083250, +0.376800540,
        +0.349868770, +0.323318480, +0.297210700, +0.271591200, +0.246505740, +0.221984860, +0.198059080, +0.174789430,
        +0.152206420, +0.130310060, +0.109161380, +0.088775635, +0.069168090, +0.050354004, +0.032379150, +0.015228271,
        -0.001068115, -0.016510010, -0.031082153, -0.044784546, -0.057617188, -0.069595340, -0.080688480, -0.090927124,
        +0.100311280, +0.108856200, +0.116577150, +0.123474120, +0.129577640, +0.134887700, +0.139450070, +0.143264770,
        +0.146362300, +0.148773200, +0.150497440, +0.151596070, +0.152069090, +0.151962280, +0.151306150, +0.150115970,
        +0.148422240, +0.146255500, +0.143676760, +0.140670780, +0.137298580, +0.133590700, +0.129562380, +0.125259400,
        +0.120697020, +0.115921020, +0.110946655, +0.105819700, +0.100540160, +0.095169070, +0.089706420, +0.084182740,
        +0.078628540, +0.073059080, +0.067520140, +0.061996460, +0.056533813, +0.051132202, +0.045837402, +0.040634155,
        +0.035552980, +0.030609130, +0.025817871, +0.021179200, +0.016708374, +0.012420654, +0.008316040, +0.004394531,
        +0.000686646, -0.002822876, -0.006134033, -0.009231567, -0.012115479, -0.014801025, -0.017257690, -0.019531250,
        -0.021575928, -0.023422241, -0.025085450, -0.026535034, -0.027801514, -0.028884888, -0.029785156, -0.030517578,
        +0.031082153, +0.031478880, +0.031738280, +0.031845093, +0.031814575, +0.031661987, +0.031387330, +0.031005860,
        +0.030532837, +0.029937744, +0.029281616, +0.028533936, +0.027725220, +0.026840210, +0.025909424, +0.024932861,
        +0.023910522, +0.022857666, +0.021789550, +0.020690918, +0.019577026, +0.018463135, +0.017349243, +0.016235352,
        +0.015121460, +0.014022827, +0.012939453, +0.011886597, +0.010848999, +0.009841919, +0.008865356, +0.007919312,
        +0.007003784, +0.006118774, +0.005294800, +0.004486084, +0.003723145, +0.003005981, +0.002334595, +0.001693726,
        +0.001098633, +0.000549316, +0.000030518, -0.000442505, -0.000869751, -0.001266479, -0.001617432, -0.001937866,
        -0.002227783, -0.002487183, -0.002700806, -0.002883911, -0.003051758, -0.003173828, -0.003280640, -0.003372192,
        -0.003417969, -0.003463745, -0.003479004, -0.003479004, -0.003463745, -0.003433228, -0.003387451, -0.003326416,
        +0.003250122, +0.003173828, +0.003082275, +0.002990723, +0.002899170, +0.002792358, +0.002685547, +0.002578735,
        +0.002456665, +0.002349854, +0.002243042, +0.002120972, +0.002014160, +0.001907349, +0.001785278, +0.001693726,
        +0.001586914, +0.001480103, +0.001388550, +0.001296997, +0.001205444, +0.001113892, +0.001037598, +0.000961304,
        +0.000885010, +0.000808716, +0.000747681, +0.000686646, +0.000625610, +0.000579834, +0.000534058, +0.000473022,
        +0.000442505, +0.000396729, +0.000366211, +0.000320435, +0.000289917, +0.000259399, +0.000244141, +0.000213623,
        +0.000198364, +0.000167847, +0.000152588, +0.000137329, +0.000122070, +0.000106812, +0.000106812, +0.000091553,
        +0.000076294, +0.000076294, +0.000061035, +0.000061035, +0.000045776, +0.000045776, +0.000030518, +0.000030518,
        +0.000030518, +0.000030518, +0.000015259, +0.000015259, +0.000015259, +0.000015259, +0.000015259, +0.000015259,
    ]

    mpeg_layers = (None, 3, 2, 1)

    def __init__(self, data, offset):
        self.data = data
        self.byte_offset = offset
        self.bit_offset = 0

        # internal buffers
        self.band_param = [[0] * 32] * 2
        self.scfsi = [[0] * 32] * 2
        self.scf = [[[0] * 32] * 3] * 2
        self.amp_values = [[[0] * 32] * 3] * 2
        self.bdata = [[[0] * 32] * 3] * 2
    
    def do_gb(self, byte_offset, bit_offset, bits):
        i = byte_offset
        j = bit_offset
        remaining = bits
        v = 0
        while remaining > 0:
            if i >= len(self.data):
                break
            v = v << 1
            if (0x80 >> j) & self.data[i]:
                v = v | 1
            j += 1
            if j >= 8:
                j -= 8
                i += 1
            remaining -= 1
        if remaining > 0:
            v = v << remaining
        
        return (v, i, j)

    def gb(self, bits, peek = False):
        retval, new_byte_offset, new_bit_offset = self.do_gb(self.byte_offset, self.bit_offset, bits)
        if not peek:
            self.byte_offset = new_byte_offset
            self.bit_offset = new_bit_offset
        return retval
    
    def get_band_param(self, band):
        bit_count = MpegAudioDecoder.band_parameter_index_bits_count[self.param_index][band]
        index = self.gb(bit_count)
        return MpegAudioDecoder.band_parameter_indexed_values[self.param_index][band][index]
    
    def read_band_value_triplet(self, chan, band):
        band_idx = self.band_param[chan][band]
        buffer = [0.0] * 3
        match band_idx:
            case 0:
                for i in range(3):
                    self.bdata[chan][i][band] = 0
                    return
            case 1 | 2 | 4:
                modulo = MpegAudioDecoder.band_infos[band_idx][0] # modulo
                val = self.gb(MpegAudioDecoder.band_infos[band_idx][3]) # cube_bits
                buffer[0] = val % modulo
                val //= modulo
                buffer[1] = val % modulo
                val //= modulo
                buffer[2] = val % modulo
            case _:
                bits = MpegAudioDecoder.band_infos[band_idx][2] # bits
                buffer = [self.gb(bits), self.gb(bits), self.gb(bits)]
        scale = (1 << (MpegAudioDecoder.band_infos[band_idx][2] - 1)) * 1.0

        for i in range(3):
            self.bdata[chan][i][band] = ((buffer[i] - scale) / scale + MpegAudioDecoder.band_infos[band_idx][9]) * MpegAudioDecoder.band_infos[band_idx][8]

    def build_next_segments(self, step):
        band = 0
        while band < self.joint_bands:
            for chan in range(self.channel_count):
                self.read_band_value_triplet(chan, band)
                amp = self.amp_values[chan][step][band]
                for i in range(3):
                    self.bdata[chan][i][band] *= amp
            band += 1
        
        while band < self.joint_bands:
            self.read_band_value_triplet(0, band)
            for i in range(3):
                self.bdata[1][i][band] = self.bdata[0][i][band]
            
            for chan in range(self.channel_count):
                amp = self.amp_values[chan][step][band]
                for i in range(3):
                    self.bdata[chan][i][band] *= amp
            band += 1
        
        while band < 32:
            for i in range(2):
                for j in range(3):
                    self.bdata[i][j][band] = 0
            band += 1
    
    def decode_mpeg2(self):
        left_samples = []
        right_samples = []

        # build amplitude
        for i in range(2):
            for j in range(3):
                for k in range(32):
                    self.amp_values[i][j][k] = 0
        
        for band in range(self.total_bands):
            for chan in range(self.channel_count):
                if self.band_param[chan][band]:
                    for step in range(3):
                        self.amp_values[chan][step][band] = MpegAudioDecoder.scalefactors[self.scf[chan][step][band]]

        frame_number = 0
        for upper_step in range(3):
            for middle_step in range(4):
                # build next segments
                self.build_next_segments(upper_step)
                for lower_step in range(3):
                    pass # TODO: wip from here

    
    def decode_data(self):
        if len(self.data) - self.byte_offset < 2 and self.bit_offset:
            return False

        # scan for the sync mark
        sync, new_offset_lg, new_offset_sm = self.do_gb(self.byte_offset, self.bit_offset, 12)
        while sync != 0xfff and self.byte_offset < len(self.data):
            (new_bit, new_offset_lg, new_offset_sm) = self.do_gb(new_offset_lg, new_offset_sm, 1)
            sync = ((sync << 1) | new_bit) & 0xfff
        
        if len(self.data) - self.byte_offset <= 1 and self.bit_offset > 4:
            return False
        
        (is_mpeg1, new_offset_lg, new_offset_sm) = self.do_gb(new_offset_lg, new_offset_sm, 1)
        (mpeg_layer_bit, new_offset_lg, new_offset_sm) = self.do_gb(new_offset_lg, new_offset_sm, 2)
        mpeg_layer = MpegAudioDecoder.mpeg_layers[mpeg_layer_bit]
        if mpeg_layer is None or mpeg_layer == 1 or mpeg_layer == 3:
            return False # None means invalid, and 1 and 3 are unsupported
        
        # When a valid sync header is found, move position and parse header.
        self.byte_offset = new_offset_lg
        self.bit_offset = new_offset_sm

        # start parsing AMM header
        _ = self.gb(1)
        full_packets_count = self.gb(4) # max 12
        srate_index = self.gb(2)
        self.sampling_rate = MpegAudioDecoder.sample_rates[is_mpeg1][srate_index]
        last_packet_frame_id = self.gb(2) # max 2
        self.last_frame_number = 3 * full_packets_count + last_packet_frame_id
        stereo_mode = self.gb(2) # 0b11 = mono
        stereo_mode_ext = self.gb(2)
        self.param_index = self.gb(3)
        self.gb(1) # zero padding

        self.channel_count = 1 if stereo_mode == 0b11 else 2

        self.total_bands = MpegAudioDecoder.total_band_counts[self.param_index]
        self.joint_bands = self.total_bands
        if stereo_mode == 1: # joint stereo
            self.joint_bands = MpegAudioDecoder.joint_band_counts[stereo_mode_ext]
        if self.joint_bands > self.total_bands:
            self.joint_bands = self.total_bands
        
        # Read MPEG2 data
        # Read band params
        band = 0
        while band < self.joint_bands:
            for chan in range(self.channel_count):
                self.band_param[chan][band] = self.get_band_param(band)
            band += 1
        
        while band < self.total_bands:
            val = self.get_band_param(band)
            self.band_param[0][band] = val
            self.band_param[1][band] = val
            band += 1
        
        while band < 32:
            self.band_param[0][band] = 0
            self.band_param[1][band] = 0
            band += 1
        
        # Read scfci
        for band in range(32):
            for chan in range(2):
                self.scfsi[chan][band] = 0
        
        for band in range(self.total_bands):
            for chan in range(self.channel_count):
                if self.band_param[chan][band]:
                    self.scfsi[chan][band] = self.gb(2)

        # Read band amplitude params
        for i in range(2):
            for j in range(3):
                for k in range(32):
                    self.scf[i][j][k] = 0
        
        for band in range(self.total_bands):
            for chan in range(self.channel_count):
                if self.band_param[chan][band]:
                    match self.scfsi[chan][band]:
                        case 0:
                            self.scf[chan][0][band] = self.gb(6)
                            self.scf[chan][1][band] = self.gb(6)
                            self.scf[chan][2][band] = self.gb(6)
                        case 1:
                            val = self.gb(6)
                            self.scf[chan][0][band] = val
                            self.scf[chan][1][band] = val
                            self.scf[chan][2][band] = self.gb(6)
                        case 2:
                            val = self.gb(6)
                            self.scf[chan][0][band] = val
                            self.scf[chan][1][band] = val
                            self.scf[chan][2][band] = val
                        case 3:
                            self.scf[chan][0][band] = self.gb(6)
                            val = self.gb(6)
                            self.scf[chan][1][band] = val
                            self.scf[chan][2][band] = val
        
        # decode MPEG2 to buffer
        try:
            output = self.decode_mpeg2()
        except IndexError: # limit hit
            return False